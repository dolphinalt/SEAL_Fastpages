{
  
    
        "post0": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible Values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): if N == 0 or N == 1: return N lo = 2 hi = N//2 while lo &lt;= hi: mid = lo + (hi-lo)//2 if mid**2 == N: return mid elif mid ** 2 &gt; N: hi = mid-1 else: lo = mid+1 return mid print(sqrt(4)) . 2 . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "if-else statements . Syntax: . if (condition) { } else { } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true sunny = true, rainy = false sunny = false, rainy = true sunny = false, rainy = false . Homework (extra): . Do the homework on this page using JavaScript, and use HTML to output it on your blog. .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Purpose and Objectives",
            "content": "Purpose and Objectives . Determine the outcome of similar algorithms | Compare similar algorithms to better understand their individual algorithms, the similarities between them, and the diferences between them | Represent algorithms using a flowchart or natural language | Create algorithms by modifying existing algorithms | Understand the advantages and disadvantages of editing existing algorithms | Understand how a binary search algorithm works and operates | .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/2022/11/29/Purpose-and-Objectives.html",
            "relUrl": "/2022/11/29/Purpose-and-Objectives.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = ? counter = ? for i in range (0, ?): sum = sum + ? counter = counter + ? . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Binary Search",
            "content": "Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . How exactly does this work? Lets look at these amazing ms paint drawings: . . . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 8 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . Python Example: . def binary_search(array, find): # where array is the given array and find is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible sublists... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == find: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; find: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half else: # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found # case 1 array = [ 2, 3, 4, 10, 40 ] find = 10 result = binary_search(array, find) if result != False: print(f&quot;Requested value {find} is present at index {str(result)}&quot;) else: print(f&quot;Requested value {find} is not present in array&quot;) # Expected output: Requested value 10 is not present at index 3 # Question: What is the maximum number of iterations given this array? # case 2 array = [ 2, 3, 4, 10, 40 ] find = 30 result = binary_search(array, find) if result != False: print(f&quot;Requested value {find} is present at index {str(result)}&quot;) else: print(f&quot;Requested value {find} is not present in array&quot;) # Expected output: Requested value 30 is not present in array # case 3 array = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 ] find = 83 result = binary_search(array, find) if result != False: print(f&quot;Requested value {find} is present at index {str(result)}&quot;) else: print(f&quot;Requested value {find} is not present in array&quot;) # Expected output: Requested value 83 is not present at index 82 # you can see how efficient this is, only requiring 7 iterations instead of {insert number of iterations going 1 by 1 would take because im too lazy to calculate it} # Question: What is the maximum number of iterations given this array? .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/markdown/2022/11/29/Binary-Search.html",
            "relUrl": "/markdown/2022/11/29/Binary-Search.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dolphinalt.github.io/SEAL_Fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dolphinalt.github.io/SEAL_Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dolphinalt.github.io/SEAL_Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}